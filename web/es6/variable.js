
// 变量的声明与绑定：大多数类C语言在声明变量的同时也会创建变量绑定。

// 变量提升机制（hoisting）: 通过var关键字声明的变量无论在哪里声明的都会被当成在当前函数作用域顶部声明的变量，而初始化操作依旧留在原处执行块级作用域：函数内部、块中（{}之间的区域）

// 临时死区（Temporal Distortion Zone）

// let和const声明的变量不会被提升到作用域顶部，所以必须在声明之后才可以使用，在作用域内声明之前该变量处于TDZ中，JS引擎在扫描代码时发现变量声明时，遇到var提升至作用域顶部，遇到let/const 将声明放到TDZ中，只有执行过变量声明语句后，变量才从TDZ中移出

// 在循环中会为每一个值创建一个副本。
// 注意：for循环与for-in for-of 不一样，for循环会修改游标的绑定，而for-in for-of 在迭代的时候不会修改已有绑定而是创建一个新绑定
// For(const I =0;i<10;i++) 是错误的  但for(const k in obj) 是正确的

// 当var被用于全局作用域时，它会创建一个新的全局变量作为全局对象，也就是window的属性

// 默认使用const 只有确实需要改变变量的值时用let

// 在UTF-16中前2^16个码位均以16位的编码单元表示，这个范围被称作基本多文种平面（BMP basic multilingual plane）,超出这个范围的码位则要归属于某个辅助平面，UTF-16引入了代理对，其规定用两个16位编码单元表示一个码位

// ES6中新增了 codePointAt()方法，这个方法接受编码单元的位置而非字符串位置作为参数，charCodeAt返回位置0处的第一个编码单元，codePointAt返回完整的码位，即使这个码位包含多个编码单元

// 对比字符串之前一定先把它们标准化为同一种形式，通过normalize() 方法

